datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Todo {
  todoId       Int      @id @default(autoincrement())
  scenarioId   Int
  target       String
  createdDate  DateTime @default(now())
  modifiedDate DateTime @default(now()) @updatedAt

  scenario    Scenario     @relation(fields: [scenarioId], references: [scenarioId], onDelete: Cascade)
  todoHolders TodoHolder[]
}

model User {
  memberId     Int        @id @default(autoincrement())
  name         String
  email        String     @unique
  profileImg   String?
  permission   Permission @default(user)
  createdDate  DateTime   @default(now())
  modifiedDate DateTime   @default(now()) @updatedAt

  trainings Training[]
}

model Training {
  trainingId    Int            @id @default(autoincrement())
  memberId      Int
  scenarioId    Int
  status        TrainingStatus @default(ACTIVE)
  limitDate     DateTime
  completedDate DateTime?
  score         Int?
  createdDate   DateTime       @default(now())
  modifiedDate  DateTime       @default(now()) @updatedAt

  user        User         @relation(fields: [memberId], references: [memberId], onDelete: Cascade)
  scenario    Scenario     @relation(fields: [scenarioId], references: [scenarioId], onDelete: Cascade)
  mailHolders MailHolder[]
  todoHolder  TodoHolder[]
}

model MailHolder {
  mailHolderId Int      @id @default(autoincrement())
  trainingId   Int
  mailId       Int
  mailBox      MailBox  @default(INBOX)
  isRead       Boolean  @default(false)
  isDownloaded Boolean  @default(false)
  createdDate  DateTime @default(now())

  training Training @relation(fields: [trainingId], references: [trainingId], onDelete: Cascade)
  mail     Mail     @relation(fields: [mailId], references: [mailId], onDelete: Cascade)
}

model Scenario {
  scenarioId   Int      @id @default(autoincrement())
  title        String
  detail       String
  isPublic     Boolean  @default(false)
  type         String
  createdDate  DateTime @default(now())
  modifiedDate DateTime @default(now()) @updatedAt

  trainings     Training[]
  scenarioFiles ScenarioFile[]
  scenarioMails ScenarioMail[]
  todos         Todo[]
}

model Mail {
  mailId        Int      @id @default(autoincrement())
  sender        String
  from          String   @map("from") // 'from'은 SQL 예약어이므로 DB 필드명 매핑
  title         String
  article       String
  isFishing     Boolean  @default(false)
  fishingDetail String?
  createdDate   DateTime @default(now())
  modifiedDate  DateTime @default(now()) @updatedAt

  mailHolders   MailHolder[]
  mailFiles     MailFile[]
  scenarioMails ScenarioMail[]
}

model File {
  fileId       Int      @id @default(autoincrement())
  uuid         String   @unique
  name         String   @unique
  path         String
  size         Int
  createdDate  DateTime @default(now())
  modifiedDate DateTime @default(now()) @updatedAt

  mailFiles     MailFile[]
  scenarioFiles ScenarioFile[]
}

model MailFile {
  fileHolderId Int @id @default(autoincrement())
  fileId       Int
  mailId       Int

  file File @relation(fields: [fileId], references: [fileId])
  mail Mail @relation(fields: [mailId], references: [mailId], onDelete: Cascade)
}

model ScenarioFile {
  fileHolderId Int @id @default(autoincrement())
  fileId       Int
  scenarioId   Int

  file     File     @relation(fields: [fileId], references: [fileId])
  scenario Scenario @relation(fields: [scenarioId], references: [scenarioId], onDelete: Cascade)
}

model ScenarioMail {
  scenarioMailId Int @id @default(autoincrement())
  scenarioId     Int
  mailId         Int

  scenario Scenario @relation(fields: [scenarioId], references: [scenarioId], onDelete: Cascade)
  mail     Mail     @relation(fields: [mailId], references: [mailId])
}

model TodoHolder {
  todoHolderId  Int       @id @default(autoincrement())
  trainingId    Int
  todoId        Int
  isCompleted   Boolean   @default(false)
  completedDate DateTime?
  createdDate   DateTime  @default(now())

  training Training @relation(fields: [trainingId], references: [trainingId], onDelete: Cascade)
  todo     Todo     @relation(fields: [todoId], references: [todoId], onDelete: Cascade)
}

enum Permission {
  admin
  user
}

enum TrainingStatus {
  ACTIVE
  COMPLETE
  FAIL
}

enum MailBox {
  INBOX
  STARRED
  SPAM
  TRASH
}
